{
  "version": 3,
  "sources": ["../src/infinite-scroller.js", "../src/integer-iterator.js", "../src/scrolls-by-key.js", "../src/hebrew-numeral.js", "../src/text-filter.js", "../src/display-range.js", "../src/title.js", "../src/location.js", "../src/url-to-ref.js", "../components/Line.js", "../components/Page.js", "../src/fuzzy.js", "../src/slugify.js", "../components/utils.js", "../components/ParshaResult.js", "../components/SelectList.js", "../components/Search.js", "../src/event-emitter.js", "../components/ParshaPicker.js", "../index.js"],
  "sourcesContent": ["let alreadyInFlight = false\nconst oneAtATime = (promise) => {\n  if (alreadyInFlight) return Promise.resolve()\n  alreadyInFlight = true\n  return promise().then((val) => {\n    alreadyInFlight = false\n    return val\n  })\n}\n\nconst InfiniteScroller = {\n  new: ({ container, fetchPreviousContent, fetchNextContent }) => ({\n    attach: () =>\n      container.addEventListener('scroll', (e) => {\n        const scrollView = e.target\n\n        const hiddenAboveHeight = scrollView.scrollTop\n        const height = scrollView.clientHeight\n\n        const hiddenBelowHeight =\n          scrollView.scrollHeight -\n          (scrollView.clientHeight + scrollView.scrollTop)\n\n        if (hiddenAboveHeight < 0.5 * height) {\n          oneAtATime(() => fetchPreviousContent.fetch()).then((fetched) => {\n            if (!fetched) return\n\n            const belowHeight = scrollView.scrollHeight - scrollView.scrollTop\n\n            fetchPreviousContent.render(fetched)\n\n            scrollView.scrollTop = scrollView.scrollHeight - belowHeight\n          })\n        } else if (hiddenBelowHeight < 0.5 * height) {\n          oneAtATime(() => fetchNextContent.fetch()).then((fetched) => {\n            if (fetched) fetchNextContent.render(fetched)\n          })\n        }\n      }),\n  }),\n}\n\nexport default InfiniteScroller\n", "export default {\n  new: ({ startingAt }) => {\n    let previousCount = 0\n    let nextCount = 0\n\n    return {\n      previous: () => {\n        previousCount += 1\n        return startingAt - previousCount\n      },\n      next: () => {\n        nextCount += 1\n        return startingAt + nextCount - 1\n      },\n    }\n  },\n}\n", "import { IntegerIterator, physicalLocationFromRef, title as getTitle } from '.'\nimport pageTitles from '../build/page-titles.json'\nimport holydays from '../build/holydays.json'\nimport parshiyot from '../build/parshiyot.json'\nimport aliyotJSON from '../build/aliyot.json'\n\nconst fetchPage = ({ path, title, pageNumber }) =>\n  window\n    .fetch(path)\n    .then((res) => res.json())\n    .then((page) => ({ content: page, title, pageNumber }))\n    .catch((err) => {\n      console.error(err)\n    })\n\nconst aliyotStrings = [\n  '\u05E8\u05D0\u05E9\u05D5\u05DF',\n  '\u05E9\u05E0\u05D9',\n  '\u05E9\u05DC\u05D9\u05E9\u05D9',\n  '\u05E8\u05D1\u05D9\u05E2\u05D9',\n  '\u05D7\u05DE\u05D9\u05E9\u05D9',\n  '\u05E9\u05E9\u05D9',\n  '\u05E9\u05D1\u05D9\u05E2\u05D9',\n  '\u05DE\u05E4\u05D8\u05D9\u05E8',\n]\n\nconst aliyahName = ({ aliyah, getParshaName }) => {\n  if (aliyah < 1 || aliyah > aliyotStrings.length) return null\n\n  if (aliyah === 1) return getParshaName()\n\n  return aliyotStrings[aliyah - 1]\n}\n\nconst Scroll = {\n  new: ({\n    scroll,\n    makePath,\n    makeTitle,\n    startingAtRef = { b: 1, c: 1, v: 1 },\n    aliyotByRef,\n    aliyahFinder,\n  }) => {\n    const { pageNumber, lineNumber } = physicalLocationFromRef({\n      ref: startingAtRef,\n      scroll,\n    })\n\n    const iterator = IntegerIterator.new({ startingAt: pageNumber })\n\n    return {\n      scrollName: scroll,\n      fetchPrevious: () => {\n        const n = iterator.previous()\n        if (n <= 0) return Promise.resolve()\n        return fetchPage({\n          path: makePath(n),\n          title: makeTitle(n),\n          pageNumber: n,\n        })\n      },\n      fetchNext: () => {\n        const n = iterator.next()\n        return fetchPage({\n          path: makePath(n),\n          title: makeTitle(n),\n          pageNumber: n,\n        })\n      },\n      startingLineNumber: lineNumber,\n      aliyotFor: ({ verses }) => {\n        const found = verses\n          .map(({ book, chapter, verse }) => {\n            return aliyotByRef?.[book]?.[chapter]?.[verse]\n          })\n          .filter(Boolean)\n\n        if (!found.length) return ''\n\n        const { standard, double, special } = found[0]\n\n        const display = (aliyah) => {\n          return aliyahName({\n            aliyah,\n            getParshaName: () => {\n              const found = aliyahFinder.find(({ ref }) =>\n                verses.some(\n                  ({ book: b, chapter: c, verse: v }) =>\n                    ref.b === b && ref.c === c && ref.v === v\n                )\n              )\n\n              return found?.he\n            },\n          })\n        }\n\n        return [\n          ...(standard ? [standard.map((n) => display(n)).join(', ')] : []),\n          ...(double ? [`[${display(double)}]`] : []),\n          ...(special ? [`(${display(special)})`] : []),\n        ].join(' ')\n      },\n    }\n  },\n}\n\nconst TorahScroll = {\n  new: ({ startingAtRef }) => {\n    return Scroll.new({\n      scroll: 'torah',\n      makePath: (n) => `/build/pages/torah/${n}.json`,\n      makeTitle: (n) => getTitle(pageTitles[n - 1]),\n      startingAtRef,\n      aliyahFinder: parshiyot,\n      aliyotByRef: aliyotJSON.torah,\n    })\n  },\n}\n\nconst EstherScroll = {\n  new: ({ startingAtRef }) => {\n    return Scroll.new({\n      scroll: 'esther',\n      makePath: (n) => `/build/pages/esther/${n}.json`,\n      makeTitle: () => '\u05D0\u05E1\u05EA\u05E8',\n      startingAtRef,\n      aliyahFinder: [],\n      aliyotByRef: aliyotJSON.esther,\n    })\n  },\n}\n\nexport default {\n  torah: TorahScroll,\n  esther: EstherScroll,\n  ...Object.keys(holydays).reduce((result, holydayKey) => {\n    const HolydayScroll = {\n      new: ({ startingAtRef }) => {\n        return Scroll.new({\n          scroll: holydayKey,\n          makePath: (n) => `/build/pages/${holydayKey}/${n}.json`,\n          makeTitle: () => holydays[holydayKey].he,\n          startingAtRef,\n          aliyahFinder: [holydays[holydayKey]],\n          aliyotByRef: aliyotJSON[holydayKey],\n        })\n      },\n    }\n    return { ...result, [holydayKey]: HolydayScroll }\n  }, {}),\n}\n", "const letters = [\n  { glyph: '\u05D0', value: 1 },\n  { glyph: '\u05D1', value: 2 },\n  { glyph: '\u05D2', value: 3 },\n  { glyph: '\u05D3', value: 4 },\n  { glyph: '\u05D4', value: 5 },\n  { glyph: '\u05D5', value: 6 },\n  { glyph: '\u05D6', value: 7 },\n  { glyph: '\u05D7', value: 8 },\n  { glyph: '\u05D8', value: 9 },\n  { glyph: '\u05D9', value: 10 },\n  { glyph: '\u05DB', value: 20 },\n  { glyph: '\u05DC', value: 30 },\n  { glyph: '\u05DE', value: 40 },\n  { glyph: '\u05E0', value: 50 },\n  { glyph: '\u05E1', value: 60 },\n  { glyph: '\u05E2', value: 70 },\n  { glyph: '\u05E4', value: 80 },\n  { glyph: '\u05E6', value: 90 },\n  { glyph: '\u05E7', value: 100 },\n  { glyph: '\u05E8', value: 200 },\n  { glyph: '\u05E9', value: 300 },\n  { glyph: '\u05EA', value: 400 },\n].reverse()\n\nconst hebrewNumeral = (n) => {\n  if (n <= 0) return ''\n  if (n === 15) return '\u05D8\u05D5'\n  if (n === 16) return '\u05D8\u05D6'\n\n  let i = 0\n  while (n < letters[i].value) {\n    ++i\n  }\n\n  const letter = letters[i]\n\n  return `${letter.glyph}${hebrewNumeral(n - letter.value)}`\n}\n\nexport default hebrewNumeral\n", "const NUN_HAFUCHA = '\u05C6'\n\nconst ketiv = (text) =>\n  text\n    .replace('#(\u05E4)', '')\n    .replace(`(${NUN_HAFUCHA})#`, `${NUN_HAFUCHA} `)\n    .replace(`#(${NUN_HAFUCHA})`, ` ${NUN_HAFUCHA}`)\n    .split(' ')\n    .map((maqafSeparatedWord) =>\n      maqafSeparatedWord\n        .split('\u05BE')\n        .map((word) => {\n          const parts = word.split('#')\n\n          if (parts.length <= 1) {\n            // i.e. there is no `#`, so just take the word\n            return parts[0]\n          }\n          return parts.slice(1)\n        })\n        .join('\u05BE')\n    )\n    .join(' ')\n    .replace(/\\[/g, '{')\n    .replace(/\\]/g, '}')\n\nconst kri = (text) =>\n  text\n    .replace('#(\u05E4)', '')\n    .replace(`(${NUN_HAFUCHA})#`, `${NUN_HAFUCHA} `)\n    .replace(`#(${NUN_HAFUCHA})`, ` ${NUN_HAFUCHA}`)\n    .replace(/\u05BE/g, ' ')\n    .replace(/#\\[.+?\\]/g, ' ')\n    .replace(new RegExp(`[^\u05D0-\u05EA\\\\s${NUN_HAFUCHA}]`, 'g'), '')\n    .replace(/\\s{2,}/g, ' ')\n\nexport default ({ text, annotated }) => (annotated ? ketiv(text) : kri(text))\n", "import hebrewNumeralFromInteger from './hebrew-numeral'\n\nvar asRange = (strings) => {\n  if (!strings.length) {\n    return ''\n  }\n\n  if (strings.length === 1) {\n    return strings[0]\n  }\n\n  return [strings[0], strings[strings.length - 1]].join('-')\n}\n\nconst asVersesRange = (verses) =>\n  asRange(\n    verses.map((verse) => {\n      const components = []\n\n      if (verse.verse === 1) {\n        components.push(verse.chapter)\n      }\n\n      components.push(verse.verse)\n\n      return components.map((num) => hebrewNumeralFromInteger(num)).join(':')\n    })\n  )\n\nexport default { asVersesRange }\n", "export default (parshiyot) => {\n  return parshiyot.join(' \u2013 ')\n}\n", "import toc from '../build/table-of-contents.json'\nimport estherToc from '../build/table-of-contents-esther.json'\nimport holydaysToc from '../build/table-of-contents-holydays.json'\n\nconst tocFromScroll = {\n  torah: toc,\n  esther: estherToc,\n  ...holydaysToc,\n}\n\nexport const defaultRef = () => {\n  return { scroll: 'torah', b: 1, c: 1, v: 1 }\n}\n\nconst convertToValidInt = (val, validValues) => {\n  return val && val in validValues ? parseInt(val) : 1\n}\n\nexport const physicalLocationFromRef = ({\n  ref: { b: book, c: chapter, v: verse },\n  scroll,\n}) => {\n  const { p: pageNumber, l: lineNumber } =\n    tocFromScroll[scroll][book][chapter][verse]\n  return { pageNumber, lineNumber }\n}\n\nexport const resolveToValidRef = ({\n  scroll = 'torah',\n  book,\n  chapter,\n  verse,\n}) => {\n  const ref = defaultRef()\n  if (scroll !== 'torah') {\n    return ref\n  }\n\n  const toc = tocFromScroll.torah\n\n  ref.b = convertToValidInt(book, toc)\n  ref.c = convertToValidInt(chapter, toc[ref.b])\n  ref.v = convertToValidInt(verse, toc[ref.b][ref.c])\n\n  return {\n    scroll,\n    ...ref,\n  }\n}\n", "import { defaultRef, resolveToValidRef } from './location'\nimport parshiyot from '../build/parshiyot.json'\nimport schedule from '../build/schedule.json'\nimport holydays from '../build/holydays.json'\n\nconst isURL = (url) => {\n  try {\n    new URL(url)\n  } catch (e) {\n    return false\n  }\n\n  return true\n}\n\nconst hashOf = (url) => {\n  if (!isURL(url)) return ''\n\n  return new URL(url).hash\n}\n\nconst RefRouter = {\n  refFromPathParts: ({ pathParts }) => {\n    if (!pathParts || !pathParts[0].length) return defaultRef()\n    const locationMatch = pathParts[0].match(/(\\d+)\\-(\\d+)-(\\d+)/)\n\n    if (!locationMatch) return defaultRef()\n\n    return resolveToValidRef({\n      scroll: 'torah',\n      book: locationMatch[1],\n      chapter: locationMatch[2],\n      verse: locationMatch[3],\n    })\n  },\n}\n\nconst ParshaRouter = {\n  refFromPathParts: ({ pathParts }) => {\n    if (!pathParts || !pathParts[0].length) return defaultRef()\n\n    const decoded = decodeURIComponent(pathParts[0])\n\n    const toLowercaseAlpha = (str) => str.toLowerCase().replace(/[^a-z]/g, '')\n\n    const found = parshiyot.find(({ he, en }) => {\n      return (\n        he === decoded || toLowercaseAlpha(en) === toLowercaseAlpha(decoded)\n      )\n    })\n\n    if (!found) return defaultRef()\n\n    const { b, c, v } = found.ref\n    return { scroll: 'torah', b, c, v }\n  },\n}\n\nconst HolydayRouter = {\n  refFromPathParts: ({ pathParts }) => {\n    const holyday = pathParts[0]\n\n    const holydaysAndEsther = {\n      ...holydays,\n      esther: { ref: { b: 1, c: 1, v: 1 } },\n    }\n\n    if (!Object.keys(holydaysAndEsther).includes(holyday)) return defaultRef()\n\n    return { scroll: holyday, ...holydaysAndEsther[holyday].ref }\n  },\n}\n\nconst NextRouter = {\n  refFromPathParts: ({ pathParts, asOfDate }) => {\n    const { label } = schedule.find(\n      ({ datetime }) => new Date(datetime) > new Date(asOfDate || Date.now())\n    )\n\n    const found = parshiyot.find(({ he }) => label.split('\u2013')[0].trim() === he)\n\n    const { b, c, v } = found.ref\n\n    return { scroll: 'torah', b, c, v }\n  },\n}\n\nconst DefaultRouter = { refFromPathParts: () => defaultRef() }\n\nexport default ({ url, asOfDate }) => {\n  const hashParts = hashOf(url).split('/').slice(1)\n\n  const router =\n    {\n      r: RefRouter,\n      p: ParshaRouter,\n      h: HolydayRouter,\n      next: NextRouter,\n    }[hashParts[0]] || DefaultRouter\n\n  return router.refFromPathParts({ pathParts: hashParts.slice(1), asOfDate })\n}\n", "import { displayRange, textFilter } from '../src'\n\nconst ktivKriAnnotation = (text) =>\n  text.replace(/[{]/g, `<span class=\"ktiv-kri\">`).replace(/[}]/g, `</span>`)\n\nconst petuchaClass = (isPetucha) => (isPetucha ? 'mod-petucha' : '')\nconst setumaClass = (column) => (column.length > 1 ? 'mod-setuma' : '')\n\nconst Line = ({ scroll: __scroll, text, verses, isPetucha }) => `\n  <tr>\n    <td class=\"line ${petuchaClass(isPetucha)}\">\n      ${text\n        .map(\n          (column) => `\n        <div class=\"column\">\n          ${column\n            .map(\n              (fragment) => `\n            <span class=\"fragment ${setumaClass(\n              column\n            )} mod-annotations-on\">${ktivKriAnnotation(\n                textFilter({ text: fragment, annotated: true })\n              )}</span>\n            <span class=\"fragment ${setumaClass(\n              column\n            )} mod-annotations-off\">${ktivKriAnnotation(\n                textFilter({ text: fragment, annotated: false })\n              )}</span>\n          `\n            )\n            .join('')}\n        </div>\n      `\n        )\n        .join('')}\n      <span class=\"location-indicator mod-verses\">${displayRange.asVersesRange(\n        verses\n      )}</span>\n      <span class=\"location-indicator mod-aliyot\" data-target-id=\"aliyot-range\">${__scroll.aliyotFor(\n        { verses }\n      )}</span>\n    </td>\n  </tr>\n`\n\nexport default Line\n", "import Line from './Line'\n\nconst Page = ({ scroll: _scroll, lines }) => `\n  <table>\n    ${lines.map(line => Line({ scroll: _scroll, ...line })).join('')}\n  </table>\n`\n\nexport default Page\n", "const hasEveryCharacterInOrder = (needle) => (item) =>\n  new RegExp(needle.split('').join('.*'), 'i').test(item)\n\nconst matchIndexes = (needle, match) => {\n  const needleChars = needle.split('')\n  const matchChars = match.split('')\n\n  const indexes = []\n  let needleIndex = 0\n\n  for (let i = 0; i < matchChars.length; i++) {\n    if (\n      needleChars[needleIndex].toLowerCase() === matchChars[i].toLowerCase()\n    ) {\n      indexes.push(i)\n      ++needleIndex\n\n      if (needleIndex >= needleChars.length) break\n    }\n  }\n\n  return indexes\n}\n\nconst indexScore = (needle, match) => {\n  const indexes = matchIndexes(needle, match)\n\n  return indexes.map((index) => index - indexes[0]).reduce((a, b) => a + b, 0)\n}\n\nconst bestMatch = (needle, getSearchTerms) => (candidate) => {\n  const { minScore, index } = getSearchTerms(candidate)\n    .map((term) =>\n      hasEveryCharacterInOrder(needle)(term)\n        ? indexScore(needle, term)\n        : Infinity\n    )\n    .reduce(\n      ({ minScore, index }, score, i) => {\n        if (score < minScore) return { minScore: score, index: i }\n\n        return { minScore, index }\n      },\n      { minScore: Infinity, index: 0 }\n    )\n\n  if (!isFinite(minScore)) return { score: minScore }\n\n  return {\n    score: minScore,\n    item: candidate,\n    match: {\n      index,\n      indexes: matchIndexes(needle, getSearchTerms(candidate)[index]),\n    },\n  }\n}\n\nexport default (haystack, needle, getSearchTerms = (x) => [x]) =>\n  haystack\n    .map(bestMatch(needle, getSearchTerms))\n    .filter(({ score }) => isFinite(score))\n    .sort((match, other) => {\n      const matchScore = match.score\n      const otherScore = other.score\n\n      const scoreDiff = matchScore - otherScore\n\n      if (scoreDiff === 0) {\n        return match.match.indexes[0] - other.match.indexes[0]\n      }\n\n      return scoreDiff\n    })\n", "export default (str) => {\n  return str\n    .replace(/[^a-zA-Z0-9\\s]/g, '')\n    .replace(/\\s+/g, '-')\n    .toLowerCase()\n}\n", "const htmlToElement = (html) => {\n  const template = document.createElement('template')\n  html = html.trim() // Never return a text node of whitespace as the result\n  template.innerHTML = html\n  return template.content.firstChild\n}\n\nconst getKeys = (key) => {\n  if (typeof key === 'string') return { key, ctrl: false }\n\n  return key\n}\n\nconst whenKey = (key, callback) => e => {\n  const { key: k, ctrl } = getKeys(key)\n\n  if (e.ctrlKey === ctrl && e.key === k && !e.repeat) callback(e)\n}\n\nconst purgeNode = (node) => {\n  while (node.firstChild) node.removeChild(node.firstChild)\n}\n\nexport default {\n  htmlToElement,\n  whenKey,\n  purgeNode\n}\n", "import utils from './utils'\n\nconst { htmlToElement } = utils\n\nconst decorateString = ({ string, atIndexes, withDecoration }) => {\n  let indexesIndex = 0\n  return string\n    .split('')\n    .map((char, i) => {\n      if (atIndexes[indexesIndex] !== i) return char\n\n      ++indexesIndex\n      return withDecoration(char)\n    }, '')\n    .join('')\n}\n\nconst strongify = (c) => (`<strong>${c}</strong>`)\n\nconst ParshaResult = ({ match, item }) => htmlToElement(`\n  <div data-target-class=\"parsha-result\" data-idx=\"${item.idx}\" data-token=\"${item.token}\" data-key=\"${item.key}\">\n    <p class=\"search-result-tag mod-hebrew\" data-target-class=\"result-hebrew\">${match.index === 0 ? decorateString({\n      string: item.he,\n      atIndexes: match.indexes,\n      withDecoration: strongify\n    }) : item.he}\n    </p>\n    <p class=\"search-result-tag\">${match.index === 1 ? decorateString({\n      string: item.en,\n      atIndexes: match.indexes,\n      withDecoration: strongify\n    }) : item.en}\n    </p>\n  </div>\n`)\n\nexport default ParshaResult\n\nconst NoResults = () => htmlToElement(`<p class=\"\" style=\"text-align: center; color: var(--light-text-color);\">\n  No results\n</p>\n`)\n\nexport { NoResults }\n", "import utils from './utils'\n\nconst { htmlToElement } = utils\n\nconst setSelected = (list, adjustSelected) => {\n  const items = [...list.querySelectorAll('[data-target-class=\"list-item\"]')]\n\n  const selectedIndex = Math.max(items.findIndex(item => item.getAttribute('data-selected') === 'true'), 0)\n\n  const selected = items[selectedIndex]\n\n  selected.removeAttribute('data-selected')\n\n  const nextIndex = (adjustSelected(selectedIndex) + items.length) % items.length\n\n  items[nextIndex].setAttribute('data-selected', 'true')\n}\n\nexport { setSelected }\n\nconst getSelected = (list) => list.querySelector('[data-target-class=\"list-item\"][data-selected=\"true\"]')\n\nexport { getSelected }\n\nconst SelectList = (items, el, onSelect) => {\n  const list = htmlToElement(`\n    <ol class=\"list\"></ol>\n  `)\n\n  items.forEach(item => {\n    const listItem = htmlToElement('<li class=\"list-item\" data-target-class=\"list-item\"></li>')\n    listItem.appendChild(item)\n    listItem.addEventListener('click', () => {\n      onSelect(listItem)\n    })\n    list.appendChild(listItem)\n  })\n\n  list\n    .querySelector('[data-target-class=\"list-item\"]')\n    .setAttribute('data-selected', 'true')\n\n  return list\n}\n\nexport default SelectList\n", "import utils from './utils'\nimport SelectList, { setSelected, getSelected } from './SelectList'\n\nconst { htmlToElement: html, whenKey, purgeNode } = utils\n\nconst Search = ({ search, emitter }) => {\n  let list\n\n  const self = html(`\n    <div class=\"search\">\n      <div class=\"search-bar\">\n        <span class=\"search-icon\">\u26B2</span>\n        <input class=\"search-input\" placeholder=\"Search...\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" />\n      </div>\n      <div class=\"search-results u-hidden\">\n      </div>\n    </div>\n  `)\n\n  self.addEventListener('keydown', whenKey('Enter', () => {\n    emitter.emit('selection', getSelected(list))\n  }))\n\n  const onSelect = item => emitter.emit('selection', item)\n\n  ;[\n    { key: 'ArrowDown', adjustment: selected => selected + 1 },\n    { key: 'ArrowUp', adjustment: selected => selected - 1 },\n    { key: { key: 'n', ctrl: true }, adjustment: selected => selected + 1 },\n    { key: { key: 'p', ctrl: true }, adjustment: selected => selected - 1 }\n  ].forEach(({ key, adjustment }) => self.addEventListener('keydown', whenKey(key, e => {\n    e.preventDefault()\n    setSelected(list, adjustment)\n  })))\n\n  const searchInput = self.querySelector('.search-input')\n  const searchResults = self.querySelector('.search-results')\n\n  searchInput.addEventListener('input', (e) => {\n    const query = e.target.value\n\n    purgeNode(searchResults)\n\n    if (query) {\n      emitter.emit('search', query)\n      const results = search(query)\n      list = SelectList(results, searchInput, onSelect)\n\n      searchResults.appendChild(list)\n      searchResults.classList.remove('u-hidden')\n    } else {\n      emitter.emit('clear')\n      searchResults.classList.add('u-hidden')\n    }\n  })\n\n  return { node: self, focus: () => { searchInput.focus() } }\n}\n\nexport default Search\n", "export default {\n  new: () => {\n    const listeners = []\n\n    return {\n      emit: (evt, payload) => {\n        listeners\n          .filter(listener => listener.evt === evt)\n          .forEach(listener => {\n            listener.callback(payload)\n          })\n      },\n      on: (evt, callback) => {\n        listeners.push({ evt, callback })\n      }\n    }\n  }\n}\n", "/* global gtag */\n\nimport parshiyot from '../build/parshiyot.json'\nimport readingSchedule from '../build/schedule.json'\nimport holydays from '../build/holydays.json'\nimport fuzzy from '../src/fuzzy'\nimport slugify from '../src/slugify'\nimport utils from './utils'\nimport ParshaResult, { NoResults } from './ParshaResult'\nimport Search from './Search'\nimport EventEmitter from '../src/event-emitter'\n\nconst { htmlToElement } = utils\n\nconst holydaysLayout = [\n  ['rosh-1', 'rosh-2', 'yom-kippur', 'taanit-tzibur', 'tisha-bav', 'shavuot-1', 'shavuot-2'],\n  ['sukkot-1', 'sukkot-2', 'sukkot-3', 'sukkot-4', 'sukkot-5', 'sukkot-6', 'sukkot-7', 'sukkot-shabbat-chol-hamoed', 'shmini-atzeret', 'simchat-torah'],\n  ['pesach-1', 'pesach-2', 'pesach-3', 'pesach-4', 'pesach-5', 'pesach-6', 'pesach-shabbat-chol-hamoed', 'pesach-7', 'pesach-8'],\n  ['purim', 'chanukah-1', 'chanukah-2', 'chanukah-3', 'chanukah-4', 'chanukah-5', 'chanukah-7', 'chanukah-8']\n]\n\nconst Parsha = ({ idx, token, he, key }) => `\n  <li\n    class=\"parsha\"\n    data-idx=\"${idx}\"\n    data-token=\"${token}\"\n    data-target-id=\"parsha\"\n    data-key=\"${key}\"\n  >\n    ${he}\n  </li>\n  `\n\nconst Book = (book) => `\n  <li class=\"parsha-book\">\n    <ol class=\"parsha-list\">\n      ${book.map((p) => Parsha({ idx: p.idx, token: 'torah', he: p.he, key: slugify(p.en) })).join('')}\n    </ol>\n  </li>\n`\n\nconst parshaFromLabel = ({ label }) => parshiyot\n  .find(({ he }) => label.startsWith(he))\n\nconst ComingUpReading = ({ label, date, datetime }, index) => {\n  const parsha = parshaFromLabel({ label })\n  return `\n  <li style=\"display: table-cell; width: calc(100% / 3); padding: 0 0.5em;\">\n    <div class=\"stack small\" style=\"display: flex; flex-direction: column; align-items: center;\">\n      <button\n        data-target-class=\"coming-up-reading\"\n        data-idx=\"${index}\"\n        data-key=\"${index === 0 ? 'next' : slugify(parsha.en)}\"\n        class=\"coming-up-button\"\n      >${label}</button>\n      <time class=\"coming-up-date\" datetime=\"${datetime}\">${date}</time>\n    </div>\n  </li>\n  `\n}\n\nconst comingUpReadings = readingSchedule\n  .filter(reading => new Date(reading.datetime) > new Date())\n  .slice(0, 3)\n\nconst ComingUp = () => `\n  <section dir=\"ltr\" id=\"coming-up\" class=\"section mod-alternate mod-padding\">\n    <div class=\"stack medium\">\n      <label class=\"section-label\">Coming up</label>\n      <div style=\"overflow-x: auto;\">\n        <ol class=\"cluster\" style=\"list-style: none; display: table; margin-left: auto; margin-right: auto; white-space: nowrap;\">\n          ${comingUpReadings\n            .map(ComingUpReading)\n            .join('')\n          }\n        </ol>\n      </div>\n    </div>\n  </section>\n`\n\nconst Browse = () => `\n  <div class=\"browse\">\n    <h2 class=\"section-heading\">\u05E4\u05E8\u05E9\u05EA \u05D4\u05E9\u05D1\u05D5\u05E2</h2>\n    <ol class=\"parsha-books mod-emphasize-first-in-group\">\n      ${parshiyot\n        .reduce((books, parsha, idx) => {\n          const book = parsha.ref.b\n          books[book] = books[book] || []\n          books[book].push({ ...parsha, idx })\n          return books\n        }, [])\n        .map(Book)\n        .join('')\n      }\n    </ol>\n\n    <h2 class=\"section-heading\">\u05D7\u05D2\u05D9\u05DD</h2>\n    <ol class=\"parsha-books\">\n      ${holydaysLayout.map(col => `\n        <li class=\"parsha-book\">\n          <ol class=\"parsha-list\">\n            ${col.map(holydayKey => {\n              const holyday = holydays[holydayKey]\n\n              return Parsha({ idx: holydayKey, token: 'holydays', he: holyday.he, key: holydayKey })\n            }).join('\\n')}\n          </ol>\n        </li>\n      `).join('\\n')}\n    </ol>\n\n    <h2 class=\"section-heading\">\u05DE\u05D2\u05D9\u05DC\u05D5\u05EA</h2>\n    <ol class=\"parsha-books\">\n      <li class=\"parsha-book\">\n        <ol class=\"parsha-list\">\n          ${Parsha({ idx: 'esther', token: 'esther', he: '\u05D0\u05E1\u05EA\u05E8', key: 'esther' })}\n        </ol>\n      </li>\n    </ol>\n  </div>\n`\n\nconst searchables = [\n  ...parshiyot.map((p, index) => ({ idx: index, token: 'torah', ...p, key: slugify(p.en) })),\n  {\n    idx: 'esther',\n    token: 'esther',\n    he: '\u05D0\u05E1\u05EA\u05E8',\n    en: 'Esther',\n    key: 'esther'\n  },\n  ...Object.keys(holydays).map(holydayKey => {\n    const holyday = holydays[holydayKey]\n\n    const { he, en } = holyday\n\n    return {\n      idx: holydayKey,\n      token: 'holydays',\n      en,\n      he,\n      key: holydayKey\n    }\n  })\n]\n\nconst searchResults = (query) => {\n  const results = fuzzy(searchables, query, parsha => [parsha.he, parsha.en])\n\n  return results.length ? results : [{\n    item: 'No results',\n    match: { index: 0, indexes: [] }\n  }]\n}\n\nconst top = (n) => (_, i) => i < n\n\nconst search = query => searchResults(query)\n  .filter(top(5))\n  .map(result => result.item === 'No results'\n    ? NoResults()\n    : ParshaResult(result)\n  )\n\nexport default jumpToRef => {\n  const searchEmitter = EventEmitter.new()\n  const s = Search({ search, emitter: searchEmitter })\n\n  const self = htmlToElement(`\n    <div class=\"parsha-picker\">\n      <div class=\"stack xlarge\">\n        <div class=\"centerize\">\n          <div id=\"search\" style=\"display: inline-block;\"></div>\n        </div>\n        ${ComingUp()}\n        ${Browse()}\n      </div>\n    </div>\n  `)\n\n  searchEmitter.on('selection', (selected) => {\n    gtag('event', 'search_selection', {\n      event_category: 'navigation',\n      event_label: selected.querySelector('[data-target-class=\"result-hebrew\"]').textContent.trim()\n    })\n\n    const result = selected.querySelector('[data-target-class=\"parsha-result\"]')\n\n    const idx = result.getAttribute(`data-idx`)\n    const token = result.getAttribute(`data-token`)\n\n    const { ref, key } = {\n      torah: idx => {\n        const parsha = parshiyot[Number(idx)]\n\n        return ({ ref: { ...parsha.ref, scroll: 'torah' }, key: slugify(parsha.en) })\n      },\n      holydays: idx => ({ ref: { ...holydays[idx].ref, scroll: idx }, key: idx }),\n      esther: () => ({ ref: { b: 1, c: 1, v: 1, scroll: 'esther' }, key: 'esther' })\n    }[token](idx)\n\n    jumpToRef({ ref, source: 'search', key })\n  })\n\n  searchEmitter.on('search', query => {\n    self.querySelector('.browse').classList.add('u-hidden')\n    self.querySelector('#coming-up').classList.add('u-hidden')\n    gtag('event', 'search', {\n      event_category: 'navigation',\n      event_label: query\n    })\n  })\n\n  searchEmitter.on('clear', () => {\n    self.querySelector('.browse').classList.remove('u-hidden')\n    self.querySelector('#coming-up').classList.remove('u-hidden')\n  })\n\n  self.querySelector('#search').parentNode.replaceChild(s.node, self.querySelector('#search'))\n\n  ;[...self.querySelectorAll('[data-target-id=\"parsha\"]')]\n    .forEach((parsha) => {\n      parsha.addEventListener('click', (e) => {\n        gtag('event', 'browse_selection', {\n          event_category: 'navigation',\n          event_label: e.target.textContent.trim()\n        })\n\n        const idx = e.target.getAttribute(`data-idx`)\n        const token = e.target.getAttribute(`data-token`)\n\n        const { ref, key } = {\n          torah: idx => {\n            const parsha = parshiyot[Number(idx)]\n\n            return ({ ref: { ...parsha.ref, scroll: 'torah' }, key: slugify(parsha.en) })\n          },\n          holydays: idx => ({ ref: { ...holydays[idx].ref, scroll: idx }, key: idx }),\n          esther: () => ({ ref: { b: 1, c: 1, v: 1, scroll: 'esther' }, key: 'esther' })\n        }[token](idx)\n\n        jumpToRef({ ref, source: 'browse', key })\n      })\n    })\n\n  ;[...self.querySelectorAll('[data-target-class=\"coming-up-reading\"]')]\n    .forEach((comingUpReading, index) => {\n      comingUpReading.addEventListener('click', e => {\n        gtag('event', 'coming_up_selection', {\n          event_category: 'navigation',\n          event_label: ['due up', 'on deck', 'in the hole'][index]\n        })\n\n        const idx = Number(e.target.getAttribute(`data-idx`))\n        const token = 'torah' // e.getAttribute(`data-token`)\n\n        const { ref, key } = {\n          torah: (idx) => {\n            const { label } = comingUpReadings[idx]\n\n            const parsha = parshaFromLabel({ label })\n\n            return { ref: { ...parsha.ref, scroll: 'torah' }, key: idx === 0 ? 'next' : slugify(parsha.en) }\n          },\n          holydays: idx => ({ ref: { ...holydays[idx].ref, scroll: idx }, key: idx }),\n          esther: () => ({ ref: { b: 1, c: 1, v: 1, scroll: 'esther' }, key: 'esther' })\n        }[token](idx)\n\n        jumpToRef({ ref, source: 'comingUp', key })\n      })\n    })\n\n  return { node: self, onMount: () => { setTimeout(() => s.focus(), 0) } }\n}\n", "/* global gtag */\n\nimport { InfiniteScroller, urlToRef, scrollsByKey } from './src'\nimport Page from './components/Page'\nimport ParshaPicker from './components/ParshaPicker'\nimport utils from './components/utils'\n\nconst { htmlToElement, whenKey, purgeNode } = utils\n\nconst insertBefore = (parent, child) => {\n  parent.insertAdjacentElement('afterbegin', child)\n}\n\nconst insertAfter = (parent, child) => {\n  parent.insertAdjacentElement('beforeend', child)\n}\n\nlet scroll\n\nconst renderTitle = ({ title }) => {\n  document.querySelector('[data-target-id=\"parsha-title\"]').innerHTML = title\n}\n\nconst makePageNode = ({ title, pageNumber }) => {\n  const node = document.createElement('div')\n  node.classList.add('tikkun-page')\n  node.setAttribute('data-page-title', title)\n  node.setAttribute('data-page-number', pageNumber)\n\n  return node\n}\n\nconst scrollToLine = ({ node, lineIndex }) => {\n  const lines = [...node.querySelectorAll('.line')]\n\n  const line = lines[lineIndex]\n\n  const book = document.querySelector('.tikkun-book')\n\n  book.scrollTop =\n    line.offsetTop + line.offsetHeight / 2 - book.offsetHeight / 2\n}\n\nconst app = {\n  jumpTo: ({ ref }) => {\n    scroll = scrollsByKey[ref.scroll].new({ startingAtRef: ref })\n\n    purgeNode(document.querySelector('[data-target-id=\"tikkun-book\"]'))\n\n    scroll\n      .fetchNext()\n      .then(renderNext)\n      .then((pageNode) => {\n        scrollToLine({\n          node: pageNode,\n          lineIndex: scroll.startingLineNumber - 1,\n        })\n      })\n\n    hideParshaPicker()\n\n    return Promise.resolve()\n  },\n}\n\nconst setVisibility = ({ selector, visible }) => {\n  const classList = document.querySelector(selector).classList\n\n  classList[visible ? 'remove' : 'add']('u-hidden')\n  classList[visible ? 'remove' : 'add']('mod-animated')\n}\n\nconst showParshaPicker = () => {\n  ;[\n    { selector: '[data-test-id=\"annotations-toggle\"]', visible: false },\n    { selector: '[data-target-id=\"repo-link\"]', visible: false },\n    { selector: '[data-target-id=\"tikkun-book\"]', visible: false },\n  ].forEach(({ selector, visible }) => setVisibility({ selector, visible }))\n\n  const jumper = ParshaPicker(({ ref, key, source }) => {\n    app.jumpTo({ ref })\n\n    const { scroll } = ref\n\n    const hashBySource = {\n      comingUp: (key) => (key === 'next' ? `#/next` : `#/p/${key}`),\n      browse: (key) => `#/${scroll === 'torah' ? 'p' : 'h'}/${key}`,\n      search: (key) => `#/${scroll === 'torah' ? 'p' : 'h'}/${key}`,\n    }[source](key)\n\n    window.location.hash = hashBySource\n  })\n\n  document.querySelector('#js-app').appendChild(jumper.node)\n\n  gtag('event', 'view', {\n    event_category: 'navigation',\n  })\n\n  jumper.onMount()\n}\n\nconst hideParshaPicker = () => {\n  ;[\n    { selector: '[data-test-id=\"annotations-toggle\"]', visible: true },\n    { selector: '[data-target-id=\"repo-link\"]', visible: true },\n    { selector: '[data-target-id=\"tikkun-book\"]', visible: true },\n  ].forEach(({ selector, visible }) => setVisibility({ selector, visible }))\n\n  document.querySelector('.parsha-picker') &&\n    document\n      .querySelector('#js-app')\n      .removeChild(document.querySelector('.parsha-picker'))\n}\n\nconst toggleParshaPicker = () => {\n  const isShowingParshaPicker = Boolean(\n    document.querySelector('.parsha-picker')\n  )\n\n  if (isShowingParshaPicker) {\n    hideParshaPicker()\n  } else {\n    showParshaPicker()\n  }\n}\n\nconst toggleAnnotations = (getPreviousCheckedState) => {\n  const toggle = document.querySelector('[data-target-id=\"annotations-toggle\"]')\n\n  toggle.checked = !getPreviousCheckedState()\n\n  const book = document.querySelector('[data-target-id=tikkun-book]')\n\n  book.classList.toggle('mod-annotations-on', toggle.checked)\n  book.classList.toggle('mod-annotations-off', !toggle.checked)\n}\n\nconst scrollState = {\n  lastScrolledPosition: 0,\n  pageAtTop: null,\n}\n\nconst resumeLastScrollPosition = () => {\n  if (!scrollState.pageAtTop) return\n  const book = document.querySelector('.tikkun-book')\n  const pageRect = scrollState.pageAtTop.getBoundingClientRect()\n\n  book.scrollTop =\n    scrollState.pageAtTop.offsetTop +\n    scrollState.lastScrolledPosition * pageRect.height\n}\n\nconst rememberLastScrolledPosition = () => {\n  const book = document.querySelector('.tikkun-book')\n  const bookBoundingRect = book.getBoundingClientRect()\n\n  const topOfBookRelativeToViewport = {\n    x: bookBoundingRect.left + bookBoundingRect.width / 2,\n    y: bookBoundingRect.top,\n  }\n\n  const pageAtTop = [\n    ...document.elementsFromPoint(\n      topOfBookRelativeToViewport.x,\n      topOfBookRelativeToViewport.y\n    ),\n  ].find((el) => el.className.includes('tikkun-page'))\n\n  if (!pageAtTop) return\n\n  scrollState.pageAtTop = pageAtTop\n  scrollState.lastScrolledPosition =\n    (book.scrollTop - pageAtTop.offsetTop) / pageAtTop.clientHeight\n}\n\nconst updatePageTitle = () => {\n  const bookBoundingRect = document\n    .querySelector('.tikkun-book')\n    .getBoundingClientRect()\n\n  const centerOfBookRelativeToViewport = {\n    x: bookBoundingRect.left + bookBoundingRect.width / 2,\n    y: bookBoundingRect.top + bookBoundingRect.height / 2,\n  }\n\n  const pageAtCenter = [\n    ...document.elementsFromPoint(\n      centerOfBookRelativeToViewport.x,\n      centerOfBookRelativeToViewport.y\n    ),\n  ].find((el) => el.className.includes('tikkun-page'))\n\n  if (!pageAtCenter) return\n\n  renderTitle({ title: pageAtCenter.getAttribute('data-page-title') })\n}\n\nlet lastCalled = Date.now()\nconst throttle = (f) => {\n  if (Date.now() - lastCalled > 300) {\n    lastCalled = Date.now()\n    f()\n  }\n}\n\nconst renderPage =\n  ({ insertStrategy: insert }) =>\n  ({ content, title, pageNumber }) => {\n    const node = makePageNode({ title, pageNumber })\n\n    insert(document.querySelector('[data-target-id=\"tikkun-book\"]'), node)\n\n    const el = htmlToElement(Page({ scroll, lines: content }))\n\n    const firstChild = node.firstChild\n    if (firstChild) {\n      node.replaceChild(el, firstChild)\n    } else {\n      node.appendChild(el)\n    }\n\n    setTimeout(updatePageTitle, 0)\n\n    return node\n  }\n\nconst renderPrevious = renderPage({ insertStrategy: insertBefore })\nconst renderNext = renderPage({ insertStrategy: insertAfter })\n\nconst debounce = (callback, delay) => {\n  let timeout\n  return () => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      callback()\n    }, delay)\n  }\n}\n\nconst listenForRevealGesture = (book) => {\n  const PULL_THRESHOLD = 30 // px\n  const PULL_MAXIMUM = 100\n\n  const endTouch = () => {\n    book.classList.add('mod-pull-releasing')\n\n    book.style.setProperty('--pull-translation', 0)\n  }\n\n  let startX = 0\n\n  book.addEventListener('touchstart', (e) => {\n    book.classList.remove('mod-pull-releasing')\n\n    startX = e.changedTouches[0].screenX\n  })\n\n  book.addEventListener('touchmove', (e) => {\n    const touchX = e.changedTouches[0].screenX\n    const pullDistance = -Math.max(touchX - startX, -PULL_MAXIMUM)\n\n    if (pullDistance < PULL_THRESHOLD) return\n\n    book.style.setProperty(\n      '--pull-translation',\n      `${PULL_THRESHOLD - pullDistance}px`\n    )\n  })\n\n  book.addEventListener('touchend', endTouch)\n\n  book.addEventListener('touchcancel', endTouch)\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const book = document.querySelector('[data-target-id=\"tikkun-book\"]')\n  const toggle = document.querySelector('[data-target-id=\"annotations-toggle\"]')\n\n  InfiniteScroller.new({\n    container: book,\n    fetchPreviousContent: {\n      fetch: () => scroll.fetchPrevious(),\n      render: renderPrevious,\n    },\n    fetchNextContent: { fetch: () => scroll.fetchNext(), render: renderNext },\n  }).attach()\n\n  book.addEventListener('scroll', () => {\n    throttle(() => updatePageTitle())\n  })\n\n  book.addEventListener(\n    'scroll',\n    debounce(() => {\n      rememberLastScrolledPosition()\n    }, 1000)\n  )\n\n  listenForRevealGesture(book)\n\n  window.addEventListener('resize', () => {\n    resumeLastScrollPosition()\n  })\n\n  toggle.addEventListener('change', (e) =>\n    toggleAnnotations(() => !e.target.checked)\n  )\n\n  document.addEventListener(\n    'keydown',\n    whenKey('Shift', () => toggleAnnotations(() => toggle.checked))\n  )\n  document.addEventListener(\n    'keyup',\n    whenKey('Shift', () => toggleAnnotations(() => toggle.checked))\n  )\n\n  document\n    .querySelector('[data-target-id=\"parsha-title\"]')\n    .addEventListener('click', toggleParshaPicker)\n  document.addEventListener('keydown', whenKey('/', toggleParshaPicker))\n\n  const startingRef = urlToRef({ url: window.location.href })\n  app.jumpTo({ ref: startingRef }).then(hideParshaPicker)\n})\n"],
  "mappings": "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",
  "names": ["scroll", "found", "scroll", "minScore", "index", "html", "htmlToElement", "htmlToElement", "htmlToElement", "whenKey", "purgeNode", "search", "searchResults", "htmlToElement", "idx", "parsha", "htmlToElement", "whenKey", "purgeNode", "scroll", "key"]
}
